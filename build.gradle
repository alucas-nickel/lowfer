import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
        classpath "io.spring.gradle:propdeps-plugin:0.0.10.RELEASE"
    }
}

plugins {
    id "java"
    id "maven"
    id "idea"
    id "jacoco"
    id "com.google.cloud.tools.jib" version "1.3.0"
    id "com.gorylenko.gradle-git-properties" version "2.0.0"
    id "com.github.node-gradle.node" version "1.3.0"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"
    id "net.ltgt.apt" version "0.21"
    id "org.sonarqube" version "2.7.1"
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

sourceCompatibility=11
targetCompatibility=11
assert System.properties["java.specification.version"] == "11" || "12"

apply plugin: "org.springframework.boot"
apply plugin: "propdeps"

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}


idea {
    module {
        excludeDirs += files("node_modules")
    }
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

// See https://virgo47.wordpress.com/2018/09/14/classpath-too-long-with-spring-boot-and-gradle/ for details
// https://github.com/jhipster/generator-jhipster/issues/9713
if (OperatingSystem.current().isWindows()) {
    task classpathJar(type: Jar) {
        inputs.files sourceSets.main.runtimeClasspath

        archiveName = "runboot-classpath.jar"
        doFirst {
            manifest {
                def classpath = sourceSets.test.runtimeClasspath.files
                attributes "Class-Path": classpath.collect {f -> f.toURI().toString()}.join(" ")
            }
        }
    }

    bootRun {
        classpath = classpathJar.outputs.files
    }
}

defaultTasks "bootRun"

group = "org.lowfer"
version = "0.1.0-snapshot"

description = ""

springBoot {
    mainClassName = "org.lowfer.Lowfer"
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = false
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    // TODO To remove after final JHipster release
    maven { url "http://oss.sonatype.org/content/repositories/snapshots" }
    //jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

dependencies {
    // import JHipster dependencies BOM
    implementation platform("io.github.jhipster:jhipster-dependencies:${jhipster_dependencies_version}" )

    // Use ", version: jhipster_dependencies_version, changing: true" if you want
    // to use a SNAPSHOT release instead of a stable release
    implementation group: "io.github.jhipster", name: "jhipster-framework"
    implementation "io.dropwizard.metrics:metrics-core"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "net.logstash.logback:logstash-logback-encoder"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.module:jackson-module-afterburner"
    implementation "org.apache.commons:commons-lang3"
    implementation "commons-io:commons-io"
    implementation "org.eclipse.jgit:org.eclipse.jgit:5.7.0.202003110725-r"
    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation ("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.zalando:problem-spring-web"
    implementation "org.springframework.boot:spring-boot-starter-cloud-connectors"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"
    implementation "io.jsonwebtoken:jjwt-api"
    runtimeOnly "io.jsonwebtoken:jjwt-impl"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson"
    implementation ("io.springfox:springfox-swagger2") {
        exclude module: "mapstruct"
    }
    implementation "io.springfox:springfox-bean-validators"

    implementation 'com.eclipsesource.j2v8:j2v8_linux_x86_64:4.6.0'
    implementation 'guru.nidi:graphviz-java-all-j2v8:0.16.1'
    implementation 'guru.nidi:graphviz-rough:0.16.1'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.26'
    implementation group: 'io.vavr', name: 'vavr', version: '0.10.2'

    annotationProcessor ("org.springframework.boot:spring-boot-configuration-processor:${spring_boot_version}") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation "com.jayway.jsonpath:json-path"
    testImplementation ("org.springframework.boot:spring-boot-starter-test") {
        exclude module: "junit"
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.vintage:junit-vintage-engine"
    testImplementation "org.assertj:assertj-core"
    testImplementation "junit:junit"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.hamcrest:hamcrest-library"
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "5.4.1"
}

if (project.hasProperty("nodeInstall")) {
    node {
        version = "${node_version}"
        npmVersion = "${npm_version}"
        yarnVersion = "${yarn_version}"
        download = true
    }
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo
