// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * lowfer API
 * lowfer API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError
} from './base';

/**
 *
 * @export
 * @interface ArchitectureListItemView
 */
export interface ArchitectureListItemView {
  /**
   *
   * @type {string}
   * @memberof ArchitectureListItemView
   */
  name?: string;
}
/**
 *
 * @export
 * @interface ArchitectureListView
 */
export interface ArchitectureListView {
  /**
   *
   * @type {Array<ArchitectureListItemView>}
   * @memberof ArchitectureListView
   */
  architectures?: Array<ArchitectureListItemView>;
}
/**
 *
 * @export
 * @interface ComponentListItemView
 */
export interface ComponentListItemView {
  /**
   *
   * @type {string}
   * @memberof ComponentListItemView
   */
  name?: string;
}
/**
 *
 * @export
 * @interface ComponentListView
 */
export interface ComponentListView {
  /**
   *
   * @type {Array<ComponentListItemView>}
   * @memberof ComponentListView
   */
  components?: Array<ComponentListItemView>;
}
/**
 *
 * @export
 * @interface ComponentTypeListItemView
 */
export interface ComponentTypeListItemView {
  /**
   *
   * @type {string}
   * @memberof ComponentTypeListItemView
   */
  label?: string;
  /**
   *
   * @type {string}
   * @memberof ComponentTypeListItemView
   */
  name?: string;
}
/**
 *
 * @export
 * @interface ComponentTypeListView
 */
export interface ComponentTypeListView {
  /**
   *
   * @type {Array<ComponentTypeListItemView>}
   * @memberof ComponentTypeListView
   */
  componentTypes?: Array<ComponentTypeListItemView>;
}
/**
 *
 * @export
 * @interface EncodedArchitectureView
 */
export interface EncodedArchitectureView {
  /**
   *
   * @type {string}
   * @memberof EncodedArchitectureView
   */
  encoded?: string;
  /**
   *
   * @type {string}
   * @memberof EncodedArchitectureView
   */
  error?: string;
}
/**
 *
 * @export
 * @interface GraphvizView
 */
export interface GraphvizView {
  /**
   *
   * @type {string}
   * @memberof GraphvizView
   */
  dot?: string;
}
/**
 *
 * @export
 * @interface IssueView
 */
export interface IssueView {
  /**
   *
   * @type {string}
   * @memberof IssueView
   */
  description?: string;
  /**
   *
   * @type {EncodedArchitectureView}
   * @memberof IssueView
   */
  encodedArchitecture?: EncodedArchitectureView;
  /**
   *
   * @type {RuleView}
   * @memberof IssueView
   */
  rule?: RuleView;
  /**
   *
   * @type {string}
   * @memberof IssueView
   */
  severity?: IssueViewSeverityEnum;
  /**
   *
   * @type {string}
   * @memberof IssueView
   */
  summary?: string;
  /**
   *
   * @type {string}
   * @memberof IssueView
   */
  type?: IssueViewTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum IssueViewSeverityEnum {
  CRITICAL = 'CRITICAL',
  MAJOR = 'MAJOR',
  MINOR = 'MINOR'
}
/**
 * @export
 * @enum {string}
 */
export enum IssueViewTypeEnum {
  MAINTENANCE = 'MAINTENANCE',
  SCALING = 'SCALING',
  SECURITY = 'SECURITY'
}

/**
 *
 * @export
 * @interface JWTToken
 */
export interface JWTToken {
  /**
   *
   * @type {string}
   * @memberof JWTToken
   */
  idToken?: string;
}
/**
 *
 * @export
 * @interface LoginVM
 */
export interface LoginVM {
  /**
   *
   * @type {string}
   * @memberof LoginVM
   */
  password: string;
  /**
   *
   * @type {boolean}
   * @memberof LoginVM
   */
  rememberMe?: boolean;
  /**
   *
   * @type {string}
   * @memberof LoginVM
   */
  username: string;
}
/**
 *
 * @export
 * @interface MaintainerListItemView
 */
export interface MaintainerListItemView {
  /**
   *
   * @type {string}
   * @memberof MaintainerListItemView
   */
  name?: string;
}
/**
 *
 * @export
 * @interface MaintainerListView
 */
export interface MaintainerListView {
  /**
   *
   * @type {Array<MaintainerListItemView>}
   * @memberof MaintainerListView
   */
  maintainers?: Array<MaintainerListItemView>;
}
/**
 *
 * @export
 * @interface RuleView
 */
export interface RuleView {
  /**
   *
   * @type {string}
   * @memberof RuleView
   */
  label?: string;
  /**
   *
   * @type {string}
   * @memberof RuleView
   */
  name?: string;
}
/**
 *
 * @export
 * @interface UserVM
 */
export interface UserVM {
  /**
   *
   * @type {boolean}
   * @memberof UserVM
   */
  activated?: boolean;
  /**
   *
   * @type {Array<string>}
   * @memberof UserVM
   */
  authorities?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof UserVM
   */
  login?: string;
}

/**
 * AccountResourceApi - axios parameter creator
 * @export
 */
export const AccountResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary getAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountUsingGET(options: any = {}): RequestArgs {
      const localVarPath = `/api/account`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * AccountResourceApi - functional programming interface
 * @export
 */
export const AccountResourceApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary getAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountUsingGET(
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserVM> {
      const localVarAxiosArgs = AccountResourceApiAxiosParamCreator(
        configuration
      ).getAccountUsingGET(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }
  };
};

/**
 * AccountResourceApi - factory interface
 * @export
 */
export const AccountResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary getAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountUsingGET(options?: any) {
      return AccountResourceApiFp(configuration).getAccountUsingGET(options)(
        axios,
        basePath
      );
    }
  };
};

/**
 * AccountResourceApi - object-oriented interface
 * @export
 * @class AccountResourceApi
 * @extends {BaseAPI}
 */
export class AccountResourceApi extends BaseAPI {
  /**
   *
   * @summary getAccount
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountResourceApi
   */
  public getAccountUsingGET(options?: any) {
    return AccountResourceApiFp(this.configuration).getAccountUsingGET(options)(
      this.axios,
      this.basePath
    );
  }
}

/**
 * ArchitectureResourceApi - axios parameter creator
 * @export
 */
export const ArchitectureResourceApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary downloadGraphviz
     * @param {string} [architectureEncoded] architecture-encoded
     * @param {string} [architectureName] architecture-name
     * @param {string} [componentName] component-name
     * @param {string} [componentType] component-type
     * @param {'TOP_TO_BOTTOM' | 'BOTTOM_TO_TOP' | 'LEFT_TO_RIGHT' | 'RIGHT_TO_LEFT'} [direction] direction
     * @param {boolean} [hideAggregates] hide-aggregates
     * @param {boolean} [internalOnly] internal-only
     * @param {string} [maintainer] maintainer
     * @param {string} [style] style
     * @param {'DEPENDENCIES' | 'DATA_FLOW'} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadGraphvizUsingGET(
      architectureEncoded?: string,
      architectureName?: string,
      componentName?: string,
      componentType?: string,
      direction?:
        | 'TOP_TO_BOTTOM'
        | 'BOTTOM_TO_TOP'
        | 'LEFT_TO_RIGHT'
        | 'RIGHT_TO_LEFT',
      hideAggregates?: boolean,
      internalOnly?: boolean,
      maintainer?: string,
      style?: string,
      type?: 'DEPENDENCIES' | 'DATA_FLOW',
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/api/graphviz`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (architectureEncoded !== undefined) {
        localVarQueryParameter['architecture-encoded'] = architectureEncoded;
      }

      if (architectureName !== undefined) {
        localVarQueryParameter['architecture-name'] = architectureName;
      }

      if (componentName !== undefined) {
        localVarQueryParameter['component-name'] = componentName;
      }

      if (componentType !== undefined) {
        localVarQueryParameter['component-type'] = componentType;
      }

      if (direction !== undefined) {
        localVarQueryParameter['direction'] = direction;
      }

      if (hideAggregates !== undefined) {
        localVarQueryParameter['hide-aggregates'] = hideAggregates;
      }

      if (internalOnly !== undefined) {
        localVarQueryParameter['internal-only'] = internalOnly;
      }

      if (maintainer !== undefined) {
        localVarQueryParameter['maintainer'] = maintainer;
      }

      if (style !== undefined) {
        localVarQueryParameter['style'] = style;
      }

      if (type !== undefined) {
        localVarQueryParameter['type'] = type;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getArchitectures
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArchitecturesUsingGET(options: any = {}): RequestArgs {
      const localVarPath = `/api/architectures`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getComponentTypes
     * @param {string} [architectureEncoded] architecture-encoded
     * @param {string} [architectureName] architecture-name
     * @param {string} [componentName] component-name
     * @param {string} [componentType] component-type
     * @param {string} [maintainer] maintainer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComponentTypesUsingGET(
      architectureEncoded?: string,
      architectureName?: string,
      componentName?: string,
      componentType?: string,
      maintainer?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/api/component-types`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (architectureEncoded !== undefined) {
        localVarQueryParameter['architecture-encoded'] = architectureEncoded;
      }

      if (architectureName !== undefined) {
        localVarQueryParameter['architecture-name'] = architectureName;
      }

      if (componentName !== undefined) {
        localVarQueryParameter['component-name'] = componentName;
      }

      if (componentType !== undefined) {
        localVarQueryParameter['component-type'] = componentType;
      }

      if (maintainer !== undefined) {
        localVarQueryParameter['maintainer'] = maintainer;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getComponents
     * @param {string} [architectureEncoded] architecture-encoded
     * @param {string} [architectureName] architecture-name
     * @param {string} [componentName] component-name
     * @param {string} [componentType] component-type
     * @param {string} [maintainer] maintainer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComponentsUsingGET(
      architectureEncoded?: string,
      architectureName?: string,
      componentName?: string,
      componentType?: string,
      maintainer?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/api/components`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (architectureEncoded !== undefined) {
        localVarQueryParameter['architecture-encoded'] = architectureEncoded;
      }

      if (architectureName !== undefined) {
        localVarQueryParameter['architecture-name'] = architectureName;
      }

      if (componentName !== undefined) {
        localVarQueryParameter['component-name'] = componentName;
      }

      if (componentType !== undefined) {
        localVarQueryParameter['component-type'] = componentType;
      }

      if (maintainer !== undefined) {
        localVarQueryParameter['maintainer'] = maintainer;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getIssues
     * @param {string} [architectureEncoded] architecture-encoded
     * @param {string} [architectureName] architecture-name
     * @param {string} [componentName] component-name
     * @param {string} [componentType] component-type
     * @param {string} [maintainer] maintainer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIssuesUsingGET(
      architectureEncoded?: string,
      architectureName?: string,
      componentName?: string,
      componentType?: string,
      maintainer?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/api/issues`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (architectureEncoded !== undefined) {
        localVarQueryParameter['architecture-encoded'] = architectureEncoded;
      }

      if (architectureName !== undefined) {
        localVarQueryParameter['architecture-name'] = architectureName;
      }

      if (componentName !== undefined) {
        localVarQueryParameter['component-name'] = componentName;
      }

      if (componentType !== undefined) {
        localVarQueryParameter['component-type'] = componentType;
      }

      if (maintainer !== undefined) {
        localVarQueryParameter['maintainer'] = maintainer;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @summary getMaintainers
     * @param {string} [architectureEncoded] architecture-encoded
     * @param {string} [architectureName] architecture-name
     * @param {string} [componentName] component-name
     * @param {string} [componentType] component-type
     * @param {string} [maintainer] maintainer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMaintainersUsingGET(
      architectureEncoded?: string,
      architectureName?: string,
      componentName?: string,
      componentType?: string,
      maintainer?: string,
      options: any = {}
    ): RequestArgs {
      const localVarPath = `/api/maintainers`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (architectureEncoded !== undefined) {
        localVarQueryParameter['architecture-encoded'] = architectureEncoded;
      }

      if (architectureName !== undefined) {
        localVarQueryParameter['architecture-name'] = architectureName;
      }

      if (componentName !== undefined) {
        localVarQueryParameter['component-name'] = componentName;
      }

      if (componentType !== undefined) {
        localVarQueryParameter['component-type'] = componentType;
      }

      if (maintainer !== undefined) {
        localVarQueryParameter['maintainer'] = maintainer;
      }

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * ArchitectureResourceApi - functional programming interface
 * @export
 */
export const ArchitectureResourceApiFp = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary downloadGraphviz
     * @param {string} [architectureEncoded] architecture-encoded
     * @param {string} [architectureName] architecture-name
     * @param {string} [componentName] component-name
     * @param {string} [componentType] component-type
     * @param {'TOP_TO_BOTTOM' | 'BOTTOM_TO_TOP' | 'LEFT_TO_RIGHT' | 'RIGHT_TO_LEFT'} [direction] direction
     * @param {boolean} [hideAggregates] hide-aggregates
     * @param {boolean} [internalOnly] internal-only
     * @param {string} [maintainer] maintainer
     * @param {string} [style] style
     * @param {'DEPENDENCIES' | 'DATA_FLOW'} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadGraphvizUsingGET(
      architectureEncoded?: string,
      architectureName?: string,
      componentName?: string,
      componentType?: string,
      direction?:
        | 'TOP_TO_BOTTOM'
        | 'BOTTOM_TO_TOP'
        | 'LEFT_TO_RIGHT'
        | 'RIGHT_TO_LEFT',
      hideAggregates?: boolean,
      internalOnly?: boolean,
      maintainer?: string,
      style?: string,
      type?: 'DEPENDENCIES' | 'DATA_FLOW',
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<GraphvizView> {
      const localVarAxiosArgs = ArchitectureResourceApiAxiosParamCreator(
        configuration
      ).downloadGraphvizUsingGET(
        architectureEncoded,
        architectureName,
        componentName,
        componentType,
        direction,
        hideAggregates,
        internalOnly,
        maintainer,
        style,
        type,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getArchitectures
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArchitecturesUsingGET(
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<ArchitectureListView> {
      const localVarAxiosArgs = ArchitectureResourceApiAxiosParamCreator(
        configuration
      ).getArchitecturesUsingGET(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getComponentTypes
     * @param {string} [architectureEncoded] architecture-encoded
     * @param {string} [architectureName] architecture-name
     * @param {string} [componentName] component-name
     * @param {string} [componentType] component-type
     * @param {string} [maintainer] maintainer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComponentTypesUsingGET(
      architectureEncoded?: string,
      architectureName?: string,
      componentName?: string,
      componentType?: string,
      maintainer?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<ComponentTypeListView> {
      const localVarAxiosArgs = ArchitectureResourceApiAxiosParamCreator(
        configuration
      ).getComponentTypesUsingGET(
        architectureEncoded,
        architectureName,
        componentName,
        componentType,
        maintainer,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getComponents
     * @param {string} [architectureEncoded] architecture-encoded
     * @param {string} [architectureName] architecture-name
     * @param {string} [componentName] component-name
     * @param {string} [componentType] component-type
     * @param {string} [maintainer] maintainer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComponentsUsingGET(
      architectureEncoded?: string,
      architectureName?: string,
      componentName?: string,
      componentType?: string,
      maintainer?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<ComponentListView> {
      const localVarAxiosArgs = ArchitectureResourceApiAxiosParamCreator(
        configuration
      ).getComponentsUsingGET(
        architectureEncoded,
        architectureName,
        componentName,
        componentType,
        maintainer,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getIssues
     * @param {string} [architectureEncoded] architecture-encoded
     * @param {string} [architectureName] architecture-name
     * @param {string} [componentName] component-name
     * @param {string} [componentType] component-type
     * @param {string} [maintainer] maintainer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIssuesUsingGET(
      architectureEncoded?: string,
      architectureName?: string,
      componentName?: string,
      componentType?: string,
      maintainer?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<Array<IssueView>> {
      const localVarAxiosArgs = ArchitectureResourceApiAxiosParamCreator(
        configuration
      ).getIssuesUsingGET(
        architectureEncoded,
        architectureName,
        componentName,
        componentType,
        maintainer,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary getMaintainers
     * @param {string} [architectureEncoded] architecture-encoded
     * @param {string} [architectureName] architecture-name
     * @param {string} [componentName] component-name
     * @param {string} [componentType] component-type
     * @param {string} [maintainer] maintainer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMaintainersUsingGET(
      architectureEncoded?: string,
      architectureName?: string,
      componentName?: string,
      componentType?: string,
      maintainer?: string,
      options?: any
    ): (
      axios?: AxiosInstance,
      basePath?: string
    ) => AxiosPromise<MaintainerListView> {
      const localVarAxiosArgs = ArchitectureResourceApiAxiosParamCreator(
        configuration
      ).getMaintainersUsingGET(
        architectureEncoded,
        architectureName,
        componentName,
        componentType,
        maintainer,
        options
      );
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }
  };
};

/**
 * ArchitectureResourceApi - factory interface
 * @export
 */
export const ArchitectureResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary downloadGraphviz
     * @param {string} [architectureEncoded] architecture-encoded
     * @param {string} [architectureName] architecture-name
     * @param {string} [componentName] component-name
     * @param {string} [componentType] component-type
     * @param {'TOP_TO_BOTTOM' | 'BOTTOM_TO_TOP' | 'LEFT_TO_RIGHT' | 'RIGHT_TO_LEFT'} [direction] direction
     * @param {boolean} [hideAggregates] hide-aggregates
     * @param {boolean} [internalOnly] internal-only
     * @param {string} [maintainer] maintainer
     * @param {string} [style] style
     * @param {'DEPENDENCIES' | 'DATA_FLOW'} [type] type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadGraphvizUsingGET(
      architectureEncoded?: string,
      architectureName?: string,
      componentName?: string,
      componentType?: string,
      direction?:
        | 'TOP_TO_BOTTOM'
        | 'BOTTOM_TO_TOP'
        | 'LEFT_TO_RIGHT'
        | 'RIGHT_TO_LEFT',
      hideAggregates?: boolean,
      internalOnly?: boolean,
      maintainer?: string,
      style?: string,
      type?: 'DEPENDENCIES' | 'DATA_FLOW',
      options?: any
    ) {
      return ArchitectureResourceApiFp(configuration).downloadGraphvizUsingGET(
        architectureEncoded,
        architectureName,
        componentName,
        componentType,
        direction,
        hideAggregates,
        internalOnly,
        maintainer,
        style,
        type,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getArchitectures
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArchitecturesUsingGET(options?: any) {
      return ArchitectureResourceApiFp(configuration).getArchitecturesUsingGET(
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getComponentTypes
     * @param {string} [architectureEncoded] architecture-encoded
     * @param {string} [architectureName] architecture-name
     * @param {string} [componentName] component-name
     * @param {string} [componentType] component-type
     * @param {string} [maintainer] maintainer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComponentTypesUsingGET(
      architectureEncoded?: string,
      architectureName?: string,
      componentName?: string,
      componentType?: string,
      maintainer?: string,
      options?: any
    ) {
      return ArchitectureResourceApiFp(configuration).getComponentTypesUsingGET(
        architectureEncoded,
        architectureName,
        componentName,
        componentType,
        maintainer,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getComponents
     * @param {string} [architectureEncoded] architecture-encoded
     * @param {string} [architectureName] architecture-name
     * @param {string} [componentName] component-name
     * @param {string} [componentType] component-type
     * @param {string} [maintainer] maintainer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComponentsUsingGET(
      architectureEncoded?: string,
      architectureName?: string,
      componentName?: string,
      componentType?: string,
      maintainer?: string,
      options?: any
    ) {
      return ArchitectureResourceApiFp(configuration).getComponentsUsingGET(
        architectureEncoded,
        architectureName,
        componentName,
        componentType,
        maintainer,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getIssues
     * @param {string} [architectureEncoded] architecture-encoded
     * @param {string} [architectureName] architecture-name
     * @param {string} [componentName] component-name
     * @param {string} [componentType] component-type
     * @param {string} [maintainer] maintainer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIssuesUsingGET(
      architectureEncoded?: string,
      architectureName?: string,
      componentName?: string,
      componentType?: string,
      maintainer?: string,
      options?: any
    ) {
      return ArchitectureResourceApiFp(configuration).getIssuesUsingGET(
        architectureEncoded,
        architectureName,
        componentName,
        componentType,
        maintainer,
        options
      )(axios, basePath);
    },
    /**
     *
     * @summary getMaintainers
     * @param {string} [architectureEncoded] architecture-encoded
     * @param {string} [architectureName] architecture-name
     * @param {string} [componentName] component-name
     * @param {string} [componentType] component-type
     * @param {string} [maintainer] maintainer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMaintainersUsingGET(
      architectureEncoded?: string,
      architectureName?: string,
      componentName?: string,
      componentType?: string,
      maintainer?: string,
      options?: any
    ) {
      return ArchitectureResourceApiFp(configuration).getMaintainersUsingGET(
        architectureEncoded,
        architectureName,
        componentName,
        componentType,
        maintainer,
        options
      )(axios, basePath);
    }
  };
};

/**
 * ArchitectureResourceApi - object-oriented interface
 * @export
 * @class ArchitectureResourceApi
 * @extends {BaseAPI}
 */
export class ArchitectureResourceApi extends BaseAPI {
  /**
   *
   * @summary downloadGraphviz
   * @param {string} [architectureEncoded] architecture-encoded
   * @param {string} [architectureName] architecture-name
   * @param {string} [componentName] component-name
   * @param {string} [componentType] component-type
   * @param {'TOP_TO_BOTTOM' | 'BOTTOM_TO_TOP' | 'LEFT_TO_RIGHT' | 'RIGHT_TO_LEFT'} [direction] direction
   * @param {boolean} [hideAggregates] hide-aggregates
   * @param {boolean} [internalOnly] internal-only
   * @param {string} [maintainer] maintainer
   * @param {string} [style] style
   * @param {'DEPENDENCIES' | 'DATA_FLOW'} [type] type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArchitectureResourceApi
   */
  public downloadGraphvizUsingGET(
    architectureEncoded?: string,
    architectureName?: string,
    componentName?: string,
    componentType?: string,
    direction?:
      | 'TOP_TO_BOTTOM'
      | 'BOTTOM_TO_TOP'
      | 'LEFT_TO_RIGHT'
      | 'RIGHT_TO_LEFT',
    hideAggregates?: boolean,
    internalOnly?: boolean,
    maintainer?: string,
    style?: string,
    type?: 'DEPENDENCIES' | 'DATA_FLOW',
    options?: any
  ) {
    return ArchitectureResourceApiFp(
      this.configuration
    ).downloadGraphvizUsingGET(
      architectureEncoded,
      architectureName,
      componentName,
      componentType,
      direction,
      hideAggregates,
      internalOnly,
      maintainer,
      style,
      type,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getArchitectures
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArchitectureResourceApi
   */
  public getArchitecturesUsingGET(options?: any) {
    return ArchitectureResourceApiFp(
      this.configuration
    ).getArchitecturesUsingGET(options)(this.axios, this.basePath);
  }

  /**
   *
   * @summary getComponentTypes
   * @param {string} [architectureEncoded] architecture-encoded
   * @param {string} [architectureName] architecture-name
   * @param {string} [componentName] component-name
   * @param {string} [componentType] component-type
   * @param {string} [maintainer] maintainer
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArchitectureResourceApi
   */
  public getComponentTypesUsingGET(
    architectureEncoded?: string,
    architectureName?: string,
    componentName?: string,
    componentType?: string,
    maintainer?: string,
    options?: any
  ) {
    return ArchitectureResourceApiFp(
      this.configuration
    ).getComponentTypesUsingGET(
      architectureEncoded,
      architectureName,
      componentName,
      componentType,
      maintainer,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getComponents
   * @param {string} [architectureEncoded] architecture-encoded
   * @param {string} [architectureName] architecture-name
   * @param {string} [componentName] component-name
   * @param {string} [componentType] component-type
   * @param {string} [maintainer] maintainer
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArchitectureResourceApi
   */
  public getComponentsUsingGET(
    architectureEncoded?: string,
    architectureName?: string,
    componentName?: string,
    componentType?: string,
    maintainer?: string,
    options?: any
  ) {
    return ArchitectureResourceApiFp(this.configuration).getComponentsUsingGET(
      architectureEncoded,
      architectureName,
      componentName,
      componentType,
      maintainer,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getIssues
   * @param {string} [architectureEncoded] architecture-encoded
   * @param {string} [architectureName] architecture-name
   * @param {string} [componentName] component-name
   * @param {string} [componentType] component-type
   * @param {string} [maintainer] maintainer
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArchitectureResourceApi
   */
  public getIssuesUsingGET(
    architectureEncoded?: string,
    architectureName?: string,
    componentName?: string,
    componentType?: string,
    maintainer?: string,
    options?: any
  ) {
    return ArchitectureResourceApiFp(this.configuration).getIssuesUsingGET(
      architectureEncoded,
      architectureName,
      componentName,
      componentType,
      maintainer,
      options
    )(this.axios, this.basePath);
  }

  /**
   *
   * @summary getMaintainers
   * @param {string} [architectureEncoded] architecture-encoded
   * @param {string} [architectureName] architecture-name
   * @param {string} [componentName] component-name
   * @param {string} [componentType] component-type
   * @param {string} [maintainer] maintainer
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArchitectureResourceApi
   */
  public getMaintainersUsingGET(
    architectureEncoded?: string,
    architectureName?: string,
    componentName?: string,
    componentType?: string,
    maintainer?: string,
    options?: any
  ) {
    return ArchitectureResourceApiFp(this.configuration).getMaintainersUsingGET(
      architectureEncoded,
      architectureName,
      componentName,
      componentType,
      maintainer,
      options
    )(this.axios, this.basePath);
  }
}

/**
 * UserJwtControllerApi - axios parameter creator
 * @export
 */
export const UserJwtControllerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary authorize
     * @param {LoginVM} loginVM loginVM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authorizeUsingPOST(loginVM: LoginVM, options: any = {}): RequestArgs {
      // verify required parameter 'loginVM' is not null or undefined
      if (loginVM === null || loginVM === undefined) {
        throw new RequiredError(
          'loginVM',
          'Required parameter loginVM was null or undefined when calling authorizeUsingPOST.'
        );
      }
      const localVarPath = `/api/authenticate`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...options.headers
      };
      const needsSerialization =
        <any>'LoginVM' !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(loginVM !== undefined ? loginVM : {})
        : loginVM || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * UserJwtControllerApi - functional programming interface
 * @export
 */
export const UserJwtControllerApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary authorize
     * @param {LoginVM} loginVM loginVM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authorizeUsingPOST(
      loginVM: LoginVM,
      options?: any
    ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JWTToken> {
      const localVarAxiosArgs = UserJwtControllerApiAxiosParamCreator(
        configuration
      ).authorizeUsingPOST(loginVM, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }
  };
};

/**
 * UserJwtControllerApi - factory interface
 * @export
 */
export const UserJwtControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     *
     * @summary authorize
     * @param {LoginVM} loginVM loginVM
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authorizeUsingPOST(loginVM: LoginVM, options?: any) {
      return UserJwtControllerApiFp(configuration).authorizeUsingPOST(
        loginVM,
        options
      )(axios, basePath);
    }
  };
};

/**
 * UserJwtControllerApi - object-oriented interface
 * @export
 * @class UserJwtControllerApi
 * @extends {BaseAPI}
 */
export class UserJwtControllerApi extends BaseAPI {
  /**
   *
   * @summary authorize
   * @param {LoginVM} loginVM loginVM
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserJwtControllerApi
   */
  public authorizeUsingPOST(loginVM: LoginVM, options?: any) {
    return UserJwtControllerApiFp(this.configuration).authorizeUsingPOST(
      loginVM,
      options
    )(this.axios, this.basePath);
  }
}
